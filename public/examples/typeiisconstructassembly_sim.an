protocol TypeIISConstructAssembly_sim

import (
	"github.com/antha-lang/antha/antha/anthalib/mixer"
	"github.com/antha-lang/antha/antha/anthalib/wtype"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/enzymes"
	"github.com/antha-lang/antha/antha/AnthaStandardLibrary/Packages/Inventory"

)

// Input parameters for this protocol (data)
Parameters (

	Constructname string
	ReactionVolume Volume
	DesiredDNAConcperpart Concentration

	AtpVol Volume
	ReVol Volume
	LigVol Volume
	ReactionTemp Temperature
	ReactionTime Time
	InactivationTemp Temperature
	InactivationTime Time

	// For pre-assembly simulation
	Partsinorder[]string
	Vectordata string
	//Enzymename string
)

// Data which is returned from this protocol, and data types
Data (
	Simulationpass bool
	Molesperpart []Mole
	MolarratiotoVector []float64
	NewDNASequence wtype.DNASequence
	Sitesfound []enzymes.Restrictionsites
)


// Physical Inputs to this protocol with types
Inputs (
	Parts []*wtype.LHComponent
	Vector *wtype.LHComponent
	RestrictionEnzyme *wtype.LHComponent
	Buffer *wtype.LHComponent
	Ligase *wtype.LHComponent
	Atp *wtype.LHComponent
	OutPlate *wtype.LHPlate
)

// Physical outputs from this protocol with types
Outputs (
	Reaction *wtype.LHSolution

	//NewPart
)

Requirements {


}

// Conditions to run on startup
Setup {

	}

// The core process for this protocol, with the steps to be performed
// for every input
Steps {

	// Check that assembly is feasible by simulating assembly of the sequences with the chosen enzyme
	partsinorder := make([]wtype.DNASequence,0)

	for _, part := range Partsinorder {
	partDNA := Inventory.Partslist[part]
	partsinorder = append(partsinorder,partDNA)
	}

	vectordata := Inventory.Partslist[Vectordata]
	assembly := enzymes.Assemblyparameters{Constructname, RestrictionEnzyme.CName,vectordata,partsinorder}
		status,numberofassemblies,_ := enzymes.Assemblysimulator(assembly)

	Sitesfound = sitesfound

	if status == "Valid assembly" && numberofassemblies == 1 {

		Simulationpass = true
	}

	// Monitor molar ratios of parts for possible troubleshooting / success correlation


	molesofeachdnaelement := make ([]float64,0)
		molarratios := make ([]float64,0)

		vector_mw := enzymes.MassDNA(vectordata.Seq,false,true)

		molesofeachdnaelement = append(molesofeachdnaelement,vector_mw)

		molarratios = append(molarratios,(vector_mw/vector_mw))
	for _, part := range partsinorder {
		part_mw := enzymes.MassDNA(part.Seq,false,true)

                var vector_mw float64
		vector_mw := enzymes.MassDNA(Vector.Seq,false,true)


		molesofeachdnaelement = append(molesofeachdnaelement,vector_mw)

		molarratios = append(molarratios,(vector_mw/vector_mw))
	for _, part := range Parts {
                var part_mw float64
		part_mw := enzymes.MassDNA(part.Seq,false,true)

		molesofeachdnaelement = append(molesofeachdnaelement,part_mw)
		molarratios = append(molarratios,(part_mw/vector_mw))
	}

		Molesperpart = molesofeachdnaelement
		MolarratiotoVector = molarratios

	// Now Perform the physical assembly
	samples := make([]*wtype.LHComponent, 0)

	bufferSample := mixer.SampleForTotalVolume(Buffer, ReactionVolume)
	samples = append(samples, bufferSample)

	atpSample := mixer.Sample(Atp, AtpVol)
	samples = append(samples, atpSample)

	vectorSample := mixer.SampleForConcentration(Vector, DesiredDNAConcperpart)
	samples = append(samples, vectorSample)

	for _, part := range Parts {
		partSample := mixer.SampleForConcentration(part, DesiredDNAConcperpart)
		samples = append(samples, partSample)
	}
	// Add enzymes
	reSample := mixer.Sample(RestrictionEnzyme, ReVol)
	samples = append(samples, reSample)
	ligSample := mixer.Sample(Ligase, LigVol)
	samples = append(samples, ligSample)
	reaction := MixInto(OutPlate, samples...)

	// Incubate the reaction mixture

	Incubate(reaction, ReactionTemp, ReactionTime, false)

	// Inactivate

	Incubate(reaction, InactivationTemp, InactivationTime, false)

	// all done
	Reaction = reaction
}

// Run after controls and a steps block are completed to
// post process any data and provide downstream results
Analysis {

}

// A block of tests to perform to validate that the sample was processed correctly
// Optionally, destructive tests can be performed to validate results on a
// dipstick basis
Validation {
}

type Mole struct {
	number float64
}
/*type Assemblyparameters struct {
	Constructname string
	Enzymename    string
	Vectordata        wtype.DNASequence
	Partsinorder  []wtype.DNASequence
}*/